/*! Fetch Inject v2.0.2 | Copyright (C) 2017â€“2018 Josh Habdas <jhabdas@protonmail.com> | @license Zlib */
const head=function(e,t,r,n,o,c,a){c=t.createElement(r),a=t.getElementsByTagName(r)[0],c.appendChild(t.createTextNode(n.text)),c.onload=o(n),a?a.parentNode.insertBefore(c,a):t.head.appendChild(c)},fetchInject=function(e,t){if(!arguments.length)return Promise.reject(new ReferenceError("Failed to execute 'fetchInject': 1 argument required but only 0 present."));if(arguments[0]&&arguments[0].constructor!==Array)return Promise.reject(new TypeError("Failed to execute 'fetchInject': argument 1 must be of type 'Array'."));if(arguments[1]&&arguments[1].constructor!==Promise)return Promise.reject(new TypeError("Failed to execute 'fetchInject': argument 2 must be of type 'Promise'."));const r=[],n=t?[].concat(t):[],o=[];return e.forEach(e=>n.push(window.fetch(e).then(e=>[e.clone().text(),e.blob()]).then(e=>Promise.all(e).then(e=>{r.push({text:e[0],blob:e[1]})})))),Promise.all(n).then(()=>(r.forEach(e=>{o.push({then:t=>{e.blob.type.includes("text/css")?head(window,document,"style",e,t):head(window,document,"script",e,t)}})}),Promise.all(o)))};export default fetchInject;